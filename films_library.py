# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'films_library.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sqlite3
import sys
from genre_dialog import GenreEditDialog, GenreAddDialog
from film_dialog import FilmEditDialog, FilmAddDialog
from delete_dialog import DeleteDialog

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QApplication, QHeaderView, QTableWidgetItem


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(890, 636)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(10, 10, 871, 581))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.tabWidget.setFont(font)
        self.tabWidget.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.tab)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 10, 421, 41))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(25)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        self.pushButton_2 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout.addWidget(self.pushButton_2)
        self.pushButton_3 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.horizontalLayout.addWidget(self.pushButton_3)
        self.tableWidget = QtWidgets.QTableWidget(self.tab)
        self.tableWidget.setGeometry(QtCore.QRect(5, 61, 841, 481))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.tableWidget_2 = QtWidgets.QTableWidget(self.tab_2)
        self.tableWidget_2.setGeometry(QtCore.QRect(10, 60, 421, 481))
        self.tableWidget_2.setObjectName("tableWidget_2")
        self.tableWidget_2.setColumnCount(0)
        self.tableWidget_2.setRowCount(0)
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.tab_2)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(10, 10, 421, 41))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(25)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.pushButton_4 = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.pushButton_4.setObjectName("pushButton_4")
        self.horizontalLayout_2.addWidget(self.pushButton_4)
        self.pushButton_5 = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.pushButton_5.setObjectName("pushButton_5")
        self.horizontalLayout_2.addWidget(self.pushButton_5)
        self.pushButton_6 = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.pushButton_6.setObjectName("pushButton_6")
        self.horizontalLayout_2.addWidget(self.pushButton_6)
        self.tabWidget.addTab(self.tab_2, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 890, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Фильмотека 2.0"))
        self.pushButton.setText(_translate("MainWindow", "Добавить фильм"))
        self.pushButton_2.setText(_translate("MainWindow", "Изменить фильм"))
        self.pushButton_3.setText(_translate("MainWindow", "Удалить фильм"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Фильмы"))
        self.pushButton_4.setText(_translate("MainWindow", "Добавить жанр"))
        self.pushButton_5.setText(_translate("MainWindow", "Изменить жанр"))
        self.pushButton_6.setText(_translate("MainWindow", "Удалить жанр"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Жанры"))


class FilmsLibrary(QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.connection = sqlite3.connect("films_db.sqlite")
        self.display_film_data()
        self.display_genre_data()
        self.pushButton.clicked.connect(self.add_film)
        self.pushButton_2.clicked.connect(self.edit_film)
        self.pushButton_3.clicked.connect(self.delete_film)
        self.pushButton_4.clicked.connect(self.add_genre)
        self.pushButton_5.clicked.connect(self.edit_genre)
        self.pushButton_6.clicked.connect(self.delete_genre)

    def delete_genre(self):
        a = self.tableWidget_2.selectedItems()
        if len(a) > 0:
            ids = []
            for i in a:
                a = self.connection.execute(f"select id from genres where title = '{i.text()}'").fetchone()[0]
                ids.append(a)
            ans = DeleteDialog().exec_()
            if ans:
                for i in ids:
                    self.connection.execute(f"delete from genres where id = {i}")
                self.connection.commit()
                self.display_genre_data()
        else:
            self.statusbar.setStatusTip("Нет выбранного жанра.")

    def edit_genre(self):
        a = self.tableWidget_2.selectedItems()
        if len(a) == 1:
            id = self.connection.execute(f"select id from genres where title = '{a[0].text()}'").fetchone()[0]
            dlg = GenreEditDialog(a[0].text())
            ans = dlg.exec_()
            if ans[0]:
                self.connection.execute(f"update genres set title = '{ans[1]}' where id = {id}")
                self.connection.commit()
                self.display_genre_data()
            else:
                self.statusbar.setStatusTip("Нет выбранного жанра.")

    def add_genre(self):
        ans = GenreAddDialog().exec_()
        if ans[0]:
            m = max([i[0] for i in self.connection.execute("select id from genres").fetchall()])
            self.connection.execute(f"insert into genres(id, title) values({m + 1}, '{ans[1]}')")
            self.connection.commit()
            self.display_genre_data()

    def is_one_row_selected(self):
        d = dict()
        for i in self.tableWidget.selectedItems():
            row, column = i.row(), i.column()
            if row in d:
                d[row].append(i)
            else:
                d[row] = [i]
        f = 1
        ans = []
        for i in d:
            if f and len(d[i]) == 4:
                f = 0
                ans = d[i]
            else:
                return False,
        if len(ans) == 4:
            return True, ans
        return False,

    def delete_film(self):
        a = self.is_one_row_selected()
        if a[0]:
            ans = DeleteDialog().exec_()
            if ans:
                id = self.connection.execute(f"select id from genres where title = '{a[1][1].text()}'").fetchone()[0]
                film_id = self.connection.execute(f"""select id from films
                                                    where title = '{a[1][0].text()}' and genre = {id}
                                                    and year = {int(a[1][2].text())}
                                                    and duration = {int(a[1][3].text())}""").fetchone()[0]
                query = f"""delete from films where id = {film_id}"""
                self.connection.execute(query)
                self.connection.commit()
                self.display_film_data()
        else:
            self.statusbar.setStatusTip("Нет выбранного фильма.")

    def edit_film(self):
        a = self.is_one_row_selected()
        if a[0]:
            id = self.connection.execute(f"select id from genres where title = '{a[1][1].text()}'").fetchone()[0]
            film_id = self.connection.execute(f"""select id from films
                                                                where title = '{a[1][0].text()}' and genre = {id}
                                                                and year = {int(a[1][2].text())}
                                                                and duration = {int(a[1][3].text())}""").fetchone()[0]
            arr = FilmEditDialog(a[1][0].text(), int(a[1][2].text()), a[1][1].text(), int(a[1][3].text())).exec_()
            if arr[0]:
                id = self.connection.execute(f"select id from genres where title = '{arr[2]}'").fetchone()[0]
                print(id)
                m = max([i[0] for i in self.connection.execute("select id from films").fetchall()])
                query = f"""update films 
                            set 
                            title = '{arr[1]}',
                            genre = {id},
                            year = {int(arr[3])},
                            duration = {int(arr[4])}
                            where id = {film_id}"""
                self.connection.execute(query)
                self.connection.commit()
                self.display_film_data()
        else:
            self.statusbar.setStatusTip("Нет выбранного фильма.")

    def add_film(self):
        arr = FilmAddDialog().exec_()
        if arr[0]:
            id = self.connection.execute(f"select id from genres where title = '{arr[2]}'").fetchone()[0]
            print(id)
            m = max([i[0] for i in self.connection.execute("select id from films").fetchall()])
            query = f"""INSERT INTO films(id, title, genre, year, duration) VALUES({m + 1},
                        '{arr[1]}', {id}, {int(arr[3])}, {int(arr[4])})"""
            self.connection.execute(query)
            self.connection.commit()
            self.display_film_data()

    def display_genre_data(self):
        query = """SELECT title FROM genres"""
        res = self.connection.cursor().execute(query).fetchall()
        title = ["Название"]
        self.tableWidget_2.setColumnCount(len(title))
        self.tableWidget_2.setHorizontalHeaderLabels(title)
        self.header = self.tableWidget.horizontalHeader()
        self.header.setSectionResizeMode(QHeaderView.Stretch)
        self.tableWidget_2.setRowCount(0)
        for i, row in enumerate(res):
            self.tableWidget_2.setRowCount(
                self.tableWidget_2.rowCount() + 1)
            for j, elem in enumerate(row):
                self.tableWidget_2.setItem(
                    i, j, QTableWidgetItem(str(elem)))

    def display_film_data(self):
        query = """SELECT films.title, genres.title, films.year, films.duration FROM
                    films
                    LEFT OUTER JOIN
                    genres
                    ON films.genre = genres.id"""
        res = self.connection.cursor().execute(query).fetchall()
        title = ["Название", "Жанр", "Год", "Продолжительность"]
        self.tableWidget.setColumnCount(len(title))
        self.tableWidget.setHorizontalHeaderLabels(title)
        self.header = self.tableWidget.horizontalHeader()
        self.header.setSectionResizeMode(QHeaderView.Stretch)
        self.tableWidget.setRowCount(0)
        for i, row in enumerate(res):
            self.tableWidget.setRowCount(
                self.tableWidget.rowCount() + 1)
            for j, elem in enumerate(row):
                self.tableWidget.setItem(
                    i, j, QTableWidgetItem(str(elem)))

    def closeEvent(self, event):
        self.connection.close()




def except_hook(cls, exception, traceback):
    sys.__excepthook__(cls, exception, traceback)


if __name__ == "__main__":

    app = QApplication(sys.argv)
    win = FilmsLibrary()
    win.show()
    sys.excepthook = except_hook
    sys.exit(app.exec())

